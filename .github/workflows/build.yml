name: Build

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions-rs/cargo@v1
        with:
          command: test
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-make
      - uses: actions-rs/cargo@v1
        with:
          use-cross: false
          command: make
          args: release
      - uses: actions/upload-artifact@v2
        with:
          name: buildpack.tgz
          path: out/packages/inline-buildpack-*.tgz
  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 'Get Version'
        id: version
        run: |
          [[ $GITHUB_REF =~ ^refs\/tags\/(.*)$ ]] && VERSION=${BASH_REMATCH[1]}
          echo "::set-output name=version::$VERSION"
      - name: 'Download binary'
        uses: actions/download-artifact@v2
        with:
          name: buildpack.tgz
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            # inline-buildpack ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
      - name: Upload Linux Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./buildpack.tgz
          asset_name: inline-buildpack-${{ steps.version.outputs.version }}.tgz
          asset_content_type: application/gzip
  register:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    name: Package, Publish, and Register
    runs-on:
      - ubuntu-latest
    steps:
      - name: 'Download binary'
        uses: actions/download-artifact@v2
        with:
          name: buildpack.tgz
      - if: ${{ github.event_name != 'pull_request' || ! github.event.pull_request.head.repo.fork }}
        name: Login to GitHub Package Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      - id: setup-pack
        name: Setup Pack
        uses: buildpacks/github-actions/setup-pack@v4.1.0
      - id: package
        name: Package Buildpack
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          ls

          VERSION="$(cat buildpack.toml | yj -t | jq -r .buildpack.version)"
          pack package-buildpack --config package.toml --publish ${PACKAGE}:${VERSION}
          DIGEST="$(crane digest ${PACKAGE}:${VERSION})"

          echo "::set-output name=version::$VERSION"
          echo "::set-output name=address::${PACKAGE}@${DIGEST}"
        shell: bash
        env:
          PACKAGE: ghcr.io/${{ github.repository_owner }}/buildpacks/hone_inline
      - id: register
        name: Register Buildpack
        uses: docker://ghcr.io/buildpacks/actions/registry/request-add-entry:4.0.0
        with:
          token:   ${{ secrets.PUBLIC_REPO_TOKEN }}
          id:      hone/inline
          version: ${{ steps.package.outputs.version }}
          address: ${{ steps.package.outputs.address }}
